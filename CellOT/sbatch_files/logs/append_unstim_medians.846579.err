Processing patients:   0%|          | 0/177 [00:00<?, ?it/s]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
/home/groups/gbrice/ptb-drugscreen/ot/cellot/cross_validation/append_unstim_medians.py:73: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df.loc[df["Individual"] == patient, colname] = median_val
Processing patients:   1%|          | 1/177 [00:05<17:11,  5.86s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   1%|          | 2/177 [00:11<16:55,  5.80s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   2%|▏         | 3/177 [00:17<16:16,  5.61s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   2%|▏         | 4/177 [00:23<17:28,  6.06s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   3%|▎         | 5/177 [00:29<17:24,  6.07s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   3%|▎         | 6/177 [00:36<17:54,  6.28s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   4%|▍         | 7/177 [00:42<17:27,  6.16s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   5%|▍         | 8/177 [00:49<17:53,  6.35s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   5%|▌         | 9/177 [00:54<17:15,  6.17s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   6%|▌         | 10/177 [01:01<17:30,  6.29s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   6%|▌         | 11/177 [01:07<16:58,  6.14s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   7%|▋         | 12/177 [01:13<17:09,  6.24s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   7%|▋         | 13/177 [01:19<16:42,  6.12s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   8%|▊         | 14/177 [01:24<15:48,  5.82s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   8%|▊         | 15/177 [01:31<16:36,  6.15s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:   9%|▉         | 16/177 [01:38<16:58,  6.33s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  10%|▉         | 17/177 [01:44<17:02,  6.39s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  10%|█         | 18/177 [01:52<17:37,  6.65s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  11%|█         | 19/177 [02:00<18:37,  7.07s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  11%|█▏        | 20/177 [02:06<17:54,  6.84s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  12%|█▏        | 21/177 [02:11<16:10,  6.22s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  12%|█▏        | 22/177 [02:18<16:40,  6.45s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  13%|█▎        | 23/177 [02:23<15:34,  6.07s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  14%|█▎        | 24/177 [02:29<15:03,  5.90s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  14%|█▍        | 25/177 [02:34<14:35,  5.76s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  15%|█▍        | 26/177 [02:41<15:43,  6.25s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  15%|█▌        | 27/177 [02:48<16:00,  6.40s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  16%|█▌        | 28/177 [02:54<15:12,  6.12s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  16%|█▋        | 29/177 [03:00<15:17,  6.20s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  17%|█▋        | 30/177 [03:06<14:57,  6.11s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  18%|█▊        | 31/177 [03:13<15:31,  6.38s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  18%|█▊        | 32/177 [03:20<15:49,  6.55s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  19%|█▊        | 33/177 [03:26<15:20,  6.39s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  19%|█▉        | 34/177 [03:32<14:44,  6.18s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  20%|█▉        | 35/177 [03:38<15:07,  6.39s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  20%|██        | 36/177 [03:45<15:24,  6.56s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  21%|██        | 37/177 [03:53<16:21,  7.01s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  21%|██▏       | 38/177 [04:01<16:19,  7.04s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  22%|██▏       | 39/177 [04:04<14:00,  6.09s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  23%|██▎       | 40/177 [04:11<14:19,  6.27s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  23%|██▎       | 41/177 [04:15<12:38,  5.58s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  24%|██▎       | 42/177 [04:23<14:10,  6.30s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  24%|██▍       | 43/177 [04:30<14:28,  6.48s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  25%|██▍       | 44/177 [04:37<14:34,  6.58s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  25%|██▌       | 45/177 [04:43<14:24,  6.55s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  26%|██▌       | 46/177 [04:50<14:30,  6.65s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  27%|██▋       | 47/177 [04:57<14:31,  6.71s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  27%|██▋       | 48/177 [05:04<14:36,  6.80s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  28%|██▊       | 49/177 [05:08<13:00,  6.10s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  28%|██▊       | 50/177 [05:15<13:26,  6.35s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  29%|██▉       | 51/177 [05:22<13:14,  6.31s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  29%|██▉       | 52/177 [05:27<12:46,  6.13s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  30%|██▉       | 53/177 [05:34<12:47,  6.19s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  31%|███       | 54/177 [05:40<12:33,  6.13s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  31%|███       | 55/177 [05:46<12:35,  6.19s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  32%|███▏      | 56/177 [05:52<12:25,  6.16s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  32%|███▏      | 57/177 [05:59<12:39,  6.33s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  33%|███▎      | 58/177 [06:03<11:35,  5.84s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  33%|███▎      | 59/177 [06:10<11:59,  6.09s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  34%|███▍      | 60/177 [06:17<12:03,  6.18s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  34%|███▍      | 61/177 [06:21<11:04,  5.73s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  35%|███▌      | 62/177 [06:29<12:16,  6.40s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  36%|███▌      | 63/177 [06:35<11:54,  6.27s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  36%|███▌      | 64/177 [06:42<11:59,  6.37s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  37%|███▋      | 65/177 [06:47<11:19,  6.07s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  37%|███▋      | 66/177 [06:55<12:08,  6.56s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  38%|███▊      | 67/177 [07:00<11:28,  6.26s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  38%|███▊      | 68/177 [07:05<10:29,  5.77s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  39%|███▉      | 69/177 [07:11<10:33,  5.87s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  40%|███▉      | 70/177 [07:18<11:15,  6.32s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  40%|████      | 71/177 [07:25<11:06,  6.29s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  41%|████      | 72/177 [07:31<11:07,  6.35s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  41%|████      | 73/177 [07:37<10:56,  6.31s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  42%|████▏     | 74/177 [07:43<10:39,  6.21s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  42%|████▏     | 75/177 [07:49<10:01,  5.90s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  43%|████▎     | 76/177 [07:55<10:14,  6.09s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  44%|████▎     | 77/177 [08:02<10:29,  6.30s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  44%|████▍     | 78/177 [08:08<10:27,  6.34s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  45%|████▍     | 79/177 [08:16<11:08,  6.82s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  45%|████▌     | 80/177 [08:24<11:42,  7.24s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  46%|████▌     | 81/177 [08:30<10:32,  6.59s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  46%|████▋     | 82/177 [08:36<10:16,  6.49s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  47%|████▋     | 83/177 [08:43<10:30,  6.70s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  47%|████▋     | 84/177 [08:48<09:32,  6.16s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  48%|████▊     | 85/177 [08:54<09:21,  6.10s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  49%|████▊     | 86/177 [09:01<09:35,  6.32s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  49%|████▉     | 87/177 [09:07<09:27,  6.30s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  50%|████▉     | 88/177 [09:14<09:29,  6.40s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  50%|█████     | 89/177 [09:20<09:12,  6.28s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  51%|█████     | 90/177 [09:27<09:33,  6.59s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  51%|█████▏    | 91/177 [09:34<09:31,  6.65s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  52%|█████▏    | 92/177 [09:40<09:11,  6.48s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  53%|█████▎    | 93/177 [09:44<08:09,  5.83s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  53%|█████▎    | 94/177 [09:51<08:23,  6.07s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  54%|█████▎    | 95/177 [09:57<08:31,  6.24s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  54%|█████▍    | 96/177 [10:05<08:54,  6.60s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  55%|█████▍    | 97/177 [10:12<08:53,  6.67s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  55%|█████▌    | 98/177 [10:18<08:46,  6.67s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  56%|█████▌    | 99/177 [10:26<09:15,  7.13s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  56%|█████▋    | 100/177 [10:34<09:13,  7.19s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  57%|█████▋    | 101/177 [10:39<08:21,  6.60s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  58%|█████▊    | 102/177 [10:46<08:23,  6.71s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  58%|█████▊    | 103/177 [10:52<08:08,  6.61s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  59%|█████▉    | 104/177 [10:59<08:09,  6.71s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  59%|█████▉    | 105/177 [11:05<07:45,  6.47s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  60%|█████▉    | 106/177 [11:12<07:37,  6.44s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  60%|██████    | 107/177 [11:18<07:28,  6.41s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  61%|██████    | 108/177 [11:25<07:39,  6.65s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  62%|██████▏   | 109/177 [11:30<07:00,  6.18s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  62%|██████▏   | 110/177 [11:37<07:02,  6.31s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  63%|██████▎   | 111/177 [11:44<07:06,  6.46s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  63%|██████▎   | 112/177 [11:49<06:36,  6.10s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  64%|██████▍   | 113/177 [11:55<06:25,  6.02s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  64%|██████▍   | 114/177 [12:03<06:54,  6.58s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  65%|██████▍   | 115/177 [12:08<06:24,  6.20s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  66%|██████▌   | 116/177 [12:14<06:08,  6.04s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  66%|██████▌   | 117/177 [12:18<05:37,  5.62s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  67%|██████▋   | 118/177 [12:25<05:42,  5.81s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  67%|██████▋   | 119/177 [12:31<05:49,  6.02s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  68%|██████▊   | 120/177 [12:38<05:51,  6.17s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  68%|██████▊   | 121/177 [12:43<05:37,  6.03s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  69%|██████▉   | 122/177 [12:50<05:41,  6.21s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  69%|██████▉   | 123/177 [12:55<05:23,  6.00s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  70%|███████   | 124/177 [13:02<05:31,  6.25s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  71%|███████   | 125/177 [13:09<05:27,  6.29s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  71%|███████   | 126/177 [13:14<05:02,  5.94s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  72%|███████▏  | 127/177 [13:19<04:50,  5.82s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  72%|███████▏  | 128/177 [13:26<04:54,  6.01s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  73%|███████▎  | 129/177 [13:30<04:26,  5.54s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  73%|███████▎  | 130/177 [13:37<04:38,  5.93s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  74%|███████▍  | 131/177 [13:42<04:16,  5.57s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  75%|███████▍  | 132/177 [13:48<04:16,  5.70s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  75%|███████▌  | 133/177 [13:54<04:24,  6.02s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  76%|███████▌  | 134/177 [14:00<04:12,  5.87s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  76%|███████▋  | 135/177 [14:07<04:17,  6.13s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  77%|███████▋  | 136/177 [14:12<04:02,  5.92s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  77%|███████▋  | 137/177 [14:18<03:59,  5.98s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  78%|███████▊  | 138/177 [14:25<04:01,  6.18s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  79%|███████▊  | 139/177 [14:32<03:59,  6.31s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  79%|███████▉  | 140/177 [14:36<03:31,  5.73s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  80%|███████▉  | 141/177 [14:43<03:39,  6.09s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  80%|████████  | 142/177 [14:49<03:32,  6.07s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  81%|████████  | 143/177 [14:56<03:32,  6.26s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  81%|████████▏ | 144/177 [15:01<03:19,  6.04s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  82%|████████▏ | 145/177 [15:09<03:28,  6.52s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  82%|████████▏ | 146/177 [15:14<03:11,  6.18s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  83%|████████▎ | 147/177 [15:20<03:02,  6.10s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  84%|████████▎ | 148/177 [15:27<03:02,  6.31s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  84%|████████▍ | 149/177 [15:34<03:06,  6.68s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  85%|████████▍ | 150/177 [15:38<02:36,  5.81s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  85%|████████▌ | 151/177 [15:44<02:31,  5.82s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  86%|████████▌ | 152/177 [15:49<02:20,  5.64s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  86%|████████▋ | 153/177 [15:55<02:12,  5.54s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  87%|████████▋ | 154/177 [16:02<02:22,  6.21s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  88%|████████▊ | 155/177 [16:09<02:20,  6.40s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  88%|████████▊ | 156/177 [16:16<02:19,  6.65s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  89%|████████▊ | 157/177 [16:20<01:56,  5.82s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  89%|████████▉ | 158/177 [16:26<01:52,  5.90s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  90%|████████▉ | 159/177 [16:31<01:41,  5.62s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  90%|█████████ | 160/177 [16:37<01:35,  5.64s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  91%|█████████ | 161/177 [16:44<01:38,  6.17s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  92%|█████████▏| 162/177 [16:51<01:35,  6.39s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  92%|█████████▏| 163/177 [16:57<01:27,  6.27s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  93%|█████████▎| 164/177 [17:03<01:20,  6.20s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  93%|█████████▎| 165/177 [17:11<01:19,  6.64s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  94%|█████████▍| 166/177 [17:18<01:13,  6.65s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  94%|█████████▍| 167/177 [17:24<01:05,  6.60s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  95%|█████████▍| 168/177 [17:32<01:02,  7.00s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  95%|█████████▌| 169/177 [17:40<00:57,  7.25s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  96%|█████████▌| 170/177 [17:48<00:51,  7.40s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  97%|█████████▋| 171/177 [17:55<00:43,  7.32s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  97%|█████████▋| 172/177 [18:01<00:35,  7.10s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  98%|█████████▊| 173/177 [18:08<00:27,  6.90s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  98%|█████████▊| 174/177 [18:12<00:18,  6.23s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  99%|█████████▉| 175/177 [18:17<00:11,  5.61s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients:  99%|█████████▉| 176/177 [18:22<00:05,  5.64s/it]/home/groups/gbrice/ptb-drugscreen/ot/cellot/cells_combined/peter_ot/lib/python3.9/site-packages/anndata/_core/anndata.py:1754: UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.
  utils.warn_names_duplicates("obs")
Processing patients: 100%|██████████| 177/177 [18:29<00:00,  5.86s/it]Processing patients: 100%|██████████| 177/177 [18:29<00:00,  6.27s/it]
